from SCons.Environment import Environment
from build_scripts.utility import glob_recursive, is_file_name, find_index
import os

TARGET_ENVIRONMENT: Environment = (
    Environment()
)  # will be cleared by Import() below, value only here to make type checker happy
Import("TARGET_ENVIRONMENT")

env = TARGET_ENVIRONMENT.Clone()
env.Append(
    LINKFLAGS=[
        "-Wl,-T",
        env.File("linker.ld").srcnode().path,  # type: ignore
        "-Wl,-Map=" + env.File("kernel.map").path,  # type: ignore
    ],
    OBJPREFIX="kernel_",
    CPPDEFINES={"__KERNEL__": 1},
    CPATH=[env.Dir(".").srcnode(), env["SOURCE_DIRECTORY"]],  # type: ignore
    CPPPATH=[env.Dir(".").srcnode(), env["SOURCE_DIRECTORY"]],  # type: ignore
    ASFLAGS=["-I", env.Dir(".").srcnode(), "-I", env["SOURCE_DIRECTORY"], "-D", "__KERNEL__=1"],  # type: ignore
)

sources = (
    glob_recursive(env, "*.c")
    + glob_recursive(env, "*.cpp")
    + glob_recursive(env, "*.asm")
    + glob_recursive(env, "*.c", env["LIBRARY_DIRECTORY"])
    + glob_recursive(env, "*.cpp", env["LIBRARY_DIRECTORY"])
    + glob_recursive(env, "*.asm", env["LIBRARY_DIRECTORY"])
)
objects = env.Object(sources)

# remove global contructor stuff
obj_crti = objects.pop(
    find_index(objects, lambda obj: is_file_name(obj, env["OBJPREFIX"] + "crti.o"))
)
obj_crtn = objects.pop(
    find_index(objects, lambda obj: is_file_name(obj, env["OBJPREFIX"] + "crtn.o"))
)

# reorder objects
objects = [
    obj_crti,
    env.File(os.path.join(env["TOOLCHAIN_LIBGCC"], "crtbegin.o")),
    *objects,
    env.File(os.path.join(env["TOOLCHAIN_LIBGCC"], "crtend.o")),
    obj_crtn,
]

kernel = env.Program("kernel.elf", objects)

Import("generate_font_header")
env.Requires(kernel, generate_font_header)
Export("kernel")
