from SCons.Environment import Environment

TARGET_ENVIRONMENT: Environment
Import("TARGET_ENVIRONMENT")
env: Environment = TARGET_ENVIRONMENT  # type: ignore

ISRS_WITH_ERRORCODES = [8, 10, 11, 12, 13, 14, 17, 21, 29, 30]
GENERATED_WARNING = (
    "!!! THIS FILE WAS GENERATED BY THE build_scripts/generate_isr SConscript !!!"
)


def generate_c_file(output_file: str) -> None:
    with open(output_file, "w") as fd:
        # header stuff
        fd.write(
            f"""/* {GENERATED_WARNING} */

#include "isr_gen.h"

"""
        )

        # function definition
        fd.write("void i686_ISR_InitializeGates() {\n")
        for index in range(256):
            fd.write(
                f"    i686_IDT_SetGate({index}, i686_ISR_{index}, i686_GDT_CODE_SEGMENT, IDT_FLAG_RING_0 | IDT_FLAG_GATE_32_BIT_INT);\n"
            )
        fd.write("}\n")


def generate_header_file(output_file: str) -> None:
    with open(output_file, "w") as fd:
        # header stuff
        fd.write(
            f"""/* {GENERATED_WARNING} */

#pragma once
#include <lib/interrupt/idt/idt.h>
#include <lib/interrupt/gdt/gdt.h>

"""
        )

        # function declarations
        for index in range(256):
            fd.write(f"void __attribute__((cdecl)) i686_ISR_{index}();\n")
        fd.write("\n")

        fd.write("void i686_ISR_InitializeGates();\n")


def generate_assembly_include_file(output_file: str) -> None:
    with open(output_file, "w") as fd:
        # header stuff
        fd.write(f"; {GENERATED_WARNING}\n\n")

        # definitions
        for index in range(256):
            if index in ISRS_WITH_ERRORCODES:
                fd.write(f"ISR_ERRORCODE {index}\n")
            else:
                fd.write(f"ISR_NOERRORCODE {index}\n")

        # ending newline
        fd.write("\n")


def generate_isr(output_directory: str) -> None:
    print("Generating ISR files...")

    output_c_file = f"{output_directory}/isr_gen.c"
    output_header_file = f"{output_directory}/isr_gen.h"
    output_assembly_include_file = f"{output_directory}/isr_gen.inc"

    generate_c_file(output_c_file)
    generate_header_file(output_header_file)
    generate_assembly_include_file(output_assembly_include_file)


Export("generate_isr")
