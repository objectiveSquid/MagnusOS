from SCons.Environment import Environment

from pathlib import Path
import shutil
import json
import sys
import os


TARGET_ENVIRONMENT: Environment
Import("TARGET_ENVIRONMENT")
env: Environment = TARGET_ENVIRONMENT  # type: ignore


def link_shared_files(env: Environment) -> None:
    print("Linking shared files...")

    list_file = Path(env["BUILD_SCRIPTS_DIRECTORY"]) / "shared_files" / "shared.json"
    input_directory = Path(env["BUILD_SCRIPTS_DIRECTORY"]) / "shared_files" / "files"
    input_directory.mkdir(
        parents=True, exist_ok=True
    )  # make sure it exists, because if its empty, git will not create it

    output_directory = env["SOURCE_DIRECTORY"]
    try:
        with open(list_file, "r") as fp:
            files = json.load(fp)
    except Exception as error:
        print(f"Failed to open {list_file}: {error}")
        sys.exit(1)

    for filename, paths in files.items():
        for path in paths:
            try:
                output_path = f"{output_directory}/{path}"
                os.makedirs(os.path.dirname(output_path), exist_ok=True)
                try:
                    os.remove(output_path)
                except FileNotFoundError:
                    pass
                if os.path.exists(output_path):
                    if not os.path.islink(output_path):
                        raise Exception(
                            f"Path {output_path} already exists and is not a link"
                        )
                else:
                    try:
                        os.symlink(f"{input_directory}/{filename}", output_path)
                    except PermissionError:
                        print(f"Failed to link {filename} to {path}, copying instead.")
                        shutil.copy2(f"{input_directory}/{filename}", output_path)
            except Exception as error:
                print(f"Failed to copy {filename} to {path}: {error}")
                sys.exit(1)


Export("link_shared_files")
